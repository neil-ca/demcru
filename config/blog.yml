title: "Actix Blog"
description: "A blog about stuff"
default: change-data-capture
posts:
  - slug: change-data-capture
    title: "Create alerts and notifications with your data and events"
    author: Neil Ulises
    date: 2022-10-23
    body: >
      [link](https://github.com)
      I've been trying to learn Rust for a while now, but I just can't get it.
      I've tried reading the book, but it's just so dry. I've tried watching
      videos, but they're all so long. I've tried reading blog posts, but they
      all seem to be written by people who already know Rust. I've tried
      reading the source code, but it's just so hard to understand. I've tried
      reading the RFCs, but they're all so long. I've tried reading the
      documentation, but it's just so hard to understand. I've tried reading
      the book again, but it's just so dry. I've tried watching videos again,
      but they're all so long. I've tried reading blog posts again, but they
      all seem to be written by people who already know Rust. I've tried
      reading the source code again, but it's just so hard to understand. I've
      tried reading the RFCs again, but they're all so long. I've tried reading
      the documentation again, but it's just so hard to understand. I've tried
      reading the book again, but it's just so dry. I've tried watching videos
      again, but they're all so long. I've tried reading blog posts again, but
      they all seem to be written by people who already know Rust. I've tried
      reading the source code again, but it's just so hard to understand. I've
      tried reading the RFCs again, but they're all so long. I've tried reading
      the documentation again, but it's just so hard to understand. I've tried
      reading the book again, but it's just so dry. I've tried watching videos
      again, but they're all so long. I've tried reading blog posts again, but
      they all seem to be written by people who already know Rust. I've tried
      reading the source code again, but it's just so hard to understand. I've
      tried reading the RFCs again, but they're all so long. I've tried reading
      the documentation again, but it's just so hard to understand. I've tried
      reading the book again, but it's just so dry. I've tried watching videos
      again, but they're all
      ![tree](/images/logo.png)

      ```rust
        use std::net::TcpListener;
        use demcru::startup::run;
        use demcru::configuration::get_config;
        use sqlx::PgPool;

        #[tokio::main]
        async fn main() -> std::io::Result<()> {
            let config = get_config().expect("Failed to read config");
            let connection_pool = PgPool::connect(&config.database.connection_string())
                .await
                .expect("Failed to connect to postgres.");
            let address = format!("127.0.0.1:{}", config.application_port);
            let listener = TcpListener::bind(address)?;
            run(listener, connection_pool)?.await?;
            Ok(())
        }
      ```
  - slug: my-web-stack
    title: "Great combo in web development"
    author: Neil Campos
    date: 2023-11-07
    body: >
      The stack([Turso](https://turso.tech/), [Htmx](https://htmx.org/), [K3s](https://k3s.io/)),
      You pick the backend language that you want.

      ## HTMX

      This post only pretend that you ask yourself if the stack that are you using
      is the appropriate one in terms of fast delivery and reliable, and with this said
      my principal issue with modern's frontends(React, Vue...) is that seems that is
      the best option by default, when if you are not creating a heavy client
      experience like a spreadsheet. Otherwise you don't need overcomplicate with:
      Maintain 2 codebases, Decoding and encoding and maintain 2 states,
      Just return html and make real [RESTful](https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/)

      ![why-htmx](/images/why-htmx.png)

      skill issue
      Yep htmx sounds like another library but is really simple be productive and 
      have good practices with your API and a standar to change the dom directly
      with HTML, even the react frameworks noticed that its more convenient use
      server components and locality of behavior and explote all the boundaries
      that the server offer; React it's to much complexity that you rarely need,
      and that forces you to maintain 2 codebases. Am only suggesting that instead
      of that you master and adopt the HATEOAS in the language you like. 
      it's a good choice to prototype user interfaces really
      quickly. 

      ## k3s

      There are many advantages to running an on premises kubernates cluster, it
      can increase performance, lower cost giving you the portability and the 
      scalability that's assoiciated with cloud native applications.

      A lot for a simple developer like me that in the first time that install k8s
      and use it to deploy a little server with a database was overwhelming that why
      I opted for k3s, It gives you all preconfigured in a single binary of about 45MB
      that completely implements the Kubernates API's. To ensure lightness they
      removed a lot of extra drivers that are not strictly part of the core, but
      still easily replaceable with external add ons.

      ## Downsides of k8s complexity

      Etcd, Load Balancers, High Availability, Networking,
      Persistent Storage, Internal Certificate rotation and distributions.
      And added to this there is the inherent complexity of running such a large
      orchestration application, so running:
      kube apiserver, kube proxy, kube scheduler, kube controller manager,
      kubelet

      ## What k3s does for you

      Internally managed Etcd cluster, Internally managed TLS communications,
      Internally managed certificate rotation and distribution,
      Integrated storage provider(localpath provisioner), Low dependency on base operating system.
      ![arch](/images/arch.svg)
