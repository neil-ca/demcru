{{>head}}
<div class="bg-gray-800 p-4 rounded-lg shadow-lg m-6">
<h1 class="text-3xl font-semibold text-center">Hi chat</h1>
<button hx-get="/count" hx-swap="outerHTML">
    Get Count Visitors
</button>

<div>
  <button id="connect" class="rounded-lg bg-green-500 p-2">Connect</button>
  <span>Status:</span>
  <span id="status">disconnected</span>
</div>

<div id="log" class="mt-4 rounded-lg p-4"></div>

<form id="chatform" class="mt-4 flex items-center">
  <input type="text" id="text" class="w-full p-2 bg-gray-600 rounded-lg"/>
  <input type="submit" id="send" value=">" class="p-2 bg-green-600 rounded ml-2 cursor-pointer"/>
</form>

<hr />

<section>
  <h2>Commands</h2>
  <table style="border-spacing: 0.5em">
    <tr>
      <td>
        <code>/list</code>
      </td>
      <td>list all available rooms</td>
    </tr>
    <tr>
      <td>
        <code>/join name</code>
      </td>
      <td>join room, if room does not exist, create new one</td>
    </tr>
    <tr>
      <td>
        <code>/name name</code>
      </td>
      <td>set session name</td>
    </tr>
    <tr>
      <td>
        <code>some message</code>
      </td>
      <td>just string, send message to all peers in same room</td>
    </tr>
  </table>
</section>
</div>
    <script>
      const $status = document.querySelector('#status')
      const $connectButton = document.querySelector('#connect')
      const $log = document.querySelector('#log')
      const $form = document.querySelector('#chatform')
      const $input = document.querySelector('#text')

      /** @type {WebSocket | null} */
      var socket = null

      function log(msg, type = 'status') {
        $log.innerHTML += `<p class="msg msg--${type}">${msg}</p>`
        $log.scrollTop += 1000
      }

      function connect() {
        disconnect()

        const { location } = window

        const proto = location.protocol.startsWith('https') ? 'wss' : 'ws'
        const wsUri = `${proto}://${location.host}/ws`

        log('Connecting...')
        socket = new WebSocket(wsUri)

        socket.onopen = () => {
          log('Connected')
          updateConnectionStatus()
        }

        socket.onmessage = (ev) => {
          log('Received: ' + ev.data, 'message')
        }

        socket.onclose = () => {
          log('Disconnected')
          socket = null
          updateConnectionStatus()
        }
      }

      function disconnect() {
        if (socket) {
          log('Disconnecting...')
          socket.close()
          socket = null

          updateConnectionStatus()
        }
      }

      function updateConnectionStatus() {
        if (socket) {
          $status.style.backgroundColor = 'transparent'
          $status.style.color = 'green'
          $status.textContent = `connected`
          $connectButton.innerHTML = 'Disconnect'
          $input.focus()
        } else {
          $status.style.backgroundColor = 'red'
          $status.style.color = 'white'
          $status.textContent = 'disconnected'
          $connectButton.textContent = 'Connect'
        }
      }

      $connectButton.addEventListener('click', () => {
        if (socket) {
          disconnect()
        } else {
          connect()
        }

        updateConnectionStatus()
      })

      $form.addEventListener('submit', (ev) => {
        ev.preventDefault()

        const text = $input.value

        log('Sending: ' + text)
        socket.send(text)

        $input.value = ''
        $input.focus()
      })

      updateConnectionStatus()

    </script>

